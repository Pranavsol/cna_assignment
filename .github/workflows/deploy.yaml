name: üîí DevSecOps Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual trigger from GitHub UI

env:
  TF_VERSION: "1.9.8"

jobs:
  build-scan-deploy:
    runs-on: self-hosted # Using self-hosted runner on your local machine

    steps:
      # --- 1Ô∏è‚É£ Checkout ---
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug - Show working directory
        run: |
          Write-Host "=== Current Directory ==="
          Get-Location
          Write-Host "`n=== Files in root ==="
          Get-ChildItem
          Write-Host "`n=== Files in terraform ==="
          Get-ChildItem terraform -ErrorAction SilentlyContinue
        shell: powershell

      # --- 2Ô∏è‚É£ Docker Setup ---
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # --- 3Ô∏è‚É£ Build Services ---
      - name: Build Service A
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/service-a:latest ./service-a

      - name: Build Service B
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/service-b:latest ./service-b

      # --- 4Ô∏è‚É£ DevSecOps Scans ---
      - name: üß© Scan Service A with Docker Scout
        uses: docker/scout-action@v1
        continue-on-error: true # Don't fail pipeline on vulnerabilities
        with:
          command: cves
          image: ${{ secrets.DOCKERHUB_USERNAME }}/service-a:latest
          sarif-file: results-service-a.sarif
          summary: true
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: üß© Scan Service B with Docker Scout
        uses: docker/scout-action@v1
        continue-on-error: true # Don't fail pipeline on vulnerabilities
        with:
          command: cves
          image: ${{ secrets.DOCKERHUB_USERNAME }}/service-b:latest
          sarif-file: results-service-b.sarif
          summary: true
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # --- 5Ô∏è‚É£ Push Docker Images ---
      - name: Push Docker Images
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/service-a:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/service-b:latest

      # --- 6Ô∏è‚É£ Setup Terraform ---
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      # --- 7Ô∏è‚É£ Verify Kubernetes Connection ---
      - name: Verify Kubernetes cluster
        run: kubectl cluster-info

      # --- 8Ô∏è‚É£ Terraform Stage: Deploy Apps ---
      - name: Create terraform.tfvars
        run: |
          $tfvarsContent = @"
          dockerhub_user = "${{ secrets.DOCKERHUB_USERNAME }}"
          db_user        = "${{ secrets.POSTGRES_USER }}"
          db_pass        = "${{ secrets.POSTGRES_PASSWORD }}"
          db_name        = "cna_assignment"
          "@
          Set-Content -Path "terraform.tfvars" -Value $tfvarsContent
          Write-Host "terraform.tfvars created successfully"
        working-directory: terraform
        shell: powershell

      - name: Terraform Init
        run: terraform init
        working-directory: terraform
        shell: powershell

      - name: Terraform Plan
        run: |
          Write-Host "=== Running Terraform Plan ==="
          terraform plan -out=tfplan
          Write-Host "=== Plan Complete ==="
        working-directory: terraform
        shell: powershell

      - name: Terraform Apply
        run: |
          Write-Host "=== Running Terraform Apply ==="
          terraform apply -auto-approve tfplan
          Write-Host "=== Apply Complete ==="
          Write-Host "=== Terraform State ==="
          terraform state list
        working-directory: terraform
        shell: powershell

      # --- 9Ô∏è‚É£ Verify Deployment ---
      - name: Verify Deployment
        run: |
          Write-Host "=== Checking deployment status ==="
          kubectl get pods -n default
          Write-Host "`n=== Services ==="
          kubectl get svc -n default
          Write-Host "`n=== Ingress ==="
          kubectl get ingress -n default
          Write-Host "`n=== All Namespaces Pods ==="
          kubectl get pods --all-namespaces
        shell: powershell

      # --- üîü Save Terraform State ---
      - name: Save Terraform state artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: terraform-state
          path: |
            terraform/terraform.tfstate
            terraform/terraform.tfstate.backup
            terraform/.terraform.lock.hcl
          retention-days: 30
          if-no-files-found: warn
