name: üîí DevSecOps Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual trigger from GitHub UI

env:
  TF_VERSION: "1.9.8"

jobs:
  build-scan-deploy:
    runs-on: self-hosted # Using self-hosted runner on your local machine

    steps:
      # --- 1Ô∏è‚É£ Checkout ---
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- 2Ô∏è‚É£ Docker Setup ---
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # --- 3Ô∏è‚É£ Build Services ---
      - name: Build Service A
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/service-a:latest ./service-a

      - name: Build Service B
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/service-b:latest ./service-b

      # --- 4Ô∏è‚É£ DevSecOps Scans ---
      - name: üß© Scan Service A with Docker Scout
        uses: docker/scout-action@v1
        continue-on-error: true # Don't fail pipeline on vulnerabilities
        with:
          command: cves
          image: ${{ secrets.DOCKERHUB_USERNAME }}/service-a:latest
          sarif-file: results-service-a.sarif
          summary: true
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: üß© Scan Service B with Docker Scout
        uses: docker/scout-action@v1
        continue-on-error: true # Don't fail pipeline on vulnerabilities
        with:
          command: cves
          image: ${{ secrets.DOCKERHUB_USERNAME }}/service-b:latest
          sarif-file: results-service-b.sarif
          summary: true
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # --- 5Ô∏è‚É£ Push Docker Images ---
      - name: Push Docker Images
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/service-a:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/service-b:latest

      # --- 6Ô∏è‚É£ Setup Terraform ---
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      # --- 7Ô∏è‚É£ Verify Kubernetes Connection ---
      - name: Verify Kubernetes cluster
        run: kubectl cluster-info

      # --- 8Ô∏è‚É£ Terraform Stage: Deploy Apps ---
      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: terraform
        env:
          TF_VAR_dockerhub_user: ${{ secrets.DOCKERHUB_USERNAME }}
          TF_VAR_db_user: ${{ secrets.POSTGRES_USER }}
          TF_VAR_db_pass: ${{ secrets.POSTGRES_PASSWORD }}
          TF_VAR_db_name: "cna_assignment"

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: terraform
        env:
          TF_VAR_dockerhub_user: ${{ secrets.DOCKERHUB_USERNAME }}
          TF_VAR_db_user: ${{ secrets.POSTGRES_USER }}
          TF_VAR_db_pass: ${{ secrets.POSTGRES_PASSWORD }}
          TF_VAR_db_name: "cna_assignment"

      # --- 9Ô∏è‚É£ Verify Deployment ---
      - name: Verify Deployment
        run: |
          echo "Checking deployment status..."
          kubectl get pods
          kubectl get svc
          kubectl get ingress

      # --- üîü Save Terraform State ---
      - name: Save Terraform state artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: terraform-state
          path: terraform/terraform.tfstate
          retention-days: 30
